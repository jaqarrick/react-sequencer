{"version":3,"sources":["controls/OptionsSlider.js","controls/SequencerOptions.js","controls/Controls.js","selector/switches/Switches.js","selector/Visualizer.js","selector/clicker/Clicker.js","selector/OptionsSlider.js","selector/SelectorOptions.js","selector/Selector.js","App.js","serviceWorker.js","index.js"],"names":["OptionsSlider","withStyles","root","color","height","padding","thumb","width","backgroundColor","boxShadow","active","valueLabel","left","top","background","track","rail","opacity","mark","marginTop","markActive","Slider","SequencerOptions","props","handleChange","selectedOption","setState","onChangeBeatDivision","value","toggleOptions","handleTempoChange","e","target","valuetext","updateBeatDivision","event","newBeatDivision","updateTempo","newTempo","onChangeTempo","updateVolume","newVolume","console","log","onChangeVolume","state","this","className","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","min","max","onChange","React","Component","InstrumentOption","addInstrument","onAddInstrumentClick","instrumentName","instrument","onClick","ControlOptions","instrumentOptions","map","option","i","key","Controls","toggleInstrumentBox","hasClickedSequencerOptions","hasClickedInstrumentOptions","toggleSequencerBox","window","addEventListener","id","hasClickedOptions","toggle","onStartStopLoopClick","isPlaying","xmlns","fill","viewBox","d","fillRule","clipRule","beatDivisionOptions","bpm","InstrumentNameSwitch","SwitchGap","InstrumentOptionsSwitch","onClickInstrumentOptions","RemoveInstrumentSwitch","removeInstrument","onRemoveInstrumentClick","selectorIndex","Visualizer","counter","beats","beat","Clicker","onClickerClick","beatClicked","sendBeatsClicked","hasClicked","NoteSelector","sendNote","note","updateInstrumentSettings","notes","noteSelected","EffectsSelector","sendDelay","sendReverb","name","SelectorOptions","hangleChange","updateNote","instrumentType","Selector","hasClickedSelectorOptions","Fragment","beatsClicked","includes","Container","children","App","startStopLoop","transport","start","loopBeat","stop","song","time","beatDivision","playInstruments","newInstrument","instrumentSettings","reverb","Tone","Freeverb","chain","volume","Master","delay","PingPongDelay","connect","wet","MembraneSynth","octave","Synth","NoiseSynth","MetalSynth","decay","effects","newInstrumentObject","allInstrumentData","disconnect","splice","forEach","instrumentObject","triggerAttackRelease","setBeatsClicked","instrumentIndex","filter","number","changeBeatDivision","timeSignature","newBeats","push","changeTempo","changeVolume","setting","update","newWet","Loop","Transport","Volume","toMaster","volumeValue","label","onStartLoopClick","startLoop","onRevealDataClick","revealData","onStopLoopClick","stopLoop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59912925.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst OptionsSlider = withStyles({\n    root: {\n      color: 'whitesmoke',\n      height: 2,\n      padding: '15px 0',\n    },\n    thumb: {\n      height: 14,\n      width: 14,\n      backgroundColor: '#fff',\n\n    //   marginTop: -14,\n    //   marginLeft: -14,\n      '&:hover': {\n          boxShadow: 'none'\n      }\n\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% - 4px)',\n      top: -22,\n      '& *': {\n        background: 'transparent',\n        color: 'whitesmoke',\n      },\n    },\n    track: {\n      height: 2,\n    },\n    rail: {\n      height: 2,\n      opacity: 0.5,\n      backgroundColor: 'purple',\n    },\n    mark: {\n      backgroundColor: '#bfbfbf',\n      height: 8,\n      width: 1,\n      marginTop: -3,\n    },\n    markActive: {\n      opacity: 1,\n      backgroundColor: 'currentColor',\n    },\n  })(Slider);\n\nexport default OptionsSlider","import React from 'react';\nimport './Controls.css';\nimport OptionsSlider from './OptionsSlider'\n\n\n\n\nclass SequencerOptions extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            selectedOption: null\n        }\n    }\n    \n    handleChange = selectedOption => {\n        this.setState({selectedOption})\n        this.props.onChangeBeatDivision(selectedOption.value)\n        this.props.toggleOptions()\n    }\n  \n    handleTempoChange = e => {\n       let value = e.target.value\n       this.props.handleTempoChange(value)\n    }\n\n    valuetext = value => {\n        return `${value}°C`;\n    }\n\n    updateBeatDivision = (event, value) => {\n        let newBeatDivision = value\n        this.props.onChangeBeatDivision(newBeatDivision)\n    }\n\n    updateTempo = (event, value) => {\n        let newTempo = value\n        this.props.onChangeTempo(newTempo)\n    }\n\n    updateVolume = (event, value) => {\n        let newVolume\n        if(value < 10){\n            newVolume = -100\n        } else {\n            newVolume = value/3 - 30\n        }\n        console.log(newVolume)\n\n        this.props.onChangeVolume(newVolume)\n    }\n\n    render() {\n        const { selectedOption } = this.state;\n        return(\n        <div className={this.props.className}>\n            <div className=\"sequencer-options\">\n                <div className=\"options\">\n                    <span> beat division\n                    </span>\n                    <OptionsSlider\n                        defaultValue={16}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        min={2}\n                        max={16}\n                        onChange={this.updateBeatDivision}\n                    />\n                </div>\n                <div className=\"options\">\n                    <span> tempo/bpm\n                    </span>\n                    <OptionsSlider\n                        defaultValue={120}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        min={40}\n                        max={260}\n                        onChange={this.updateTempo}\n                    />\n                </div>\n                <div className=\"options\">\n                    <span> volume\n                    </span>\n                    <OptionsSlider\n                        defaultValue={90}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        min={0}\n                        max={100}\n                        onChange={this.updateVolume}\n                    />\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default SequencerOptions\n","import React from 'react';\nimport SequencerOptions from './SequencerOptions'\nimport './Controls.css';\n\nclass InstrumentOption extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      instrument: this.props.instrumentName\n    }\n  }\n\n  addInstrument = () => {\n    this.props.onAddInstrumentClick(this.props.instrumentName)\n    this.props.toggleOptions()\n  }\n\n  render() {\n    return(\n      <button \n      className=\"options\"\n      onClick={this.addInstrument}\n      >\n        {this.props.instrumentName}\n      </button>\n\n\n    )\n  }\n}\nclass ControlOptions extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className}>\n        {this.props.instrumentOptions.map((option, i)=>\n          <InstrumentOption \n          key={i} \n          instrumentName={option}\n          onAddInstrumentClick={this.props.onAddInstrumentClick}\n          toggleOptions={this.props.toggleOptions} />\n        )}\n      </div>\n    )\n  }\n\n}\n\nclass Controls extends React.Component {\n    constructor(props){\n      super(props)\n\n      this.state = {\n        instrumentOptions: [\"option1\", \"option2\", \"option3\", \"option4\"],\n        hasClickedInstrumentOptions: false,\n        hasClickedSequencerOptions: false\n      }\n    }\n    componentDidMount(){\n      window.addEventListener(\"click\", (e)=>{\n        let id = e.target.id\n        if(id !== \"svg\" && id !== \"optionsButton\" && this.state.hasClickedOptions === true) {\n          this.toggle()\n        }\n      })\n    }\n    toggleInstrumentBox = () => {\n      if(this.state.hasClickedSequencerOptions){\n        this.setState({\n          hasClickedInstrumentOptions: !this.state.hasClickedInstrumentOptions,\n          hasClickedSequencerOptions: false\n        })\n      } else {\n        this.setState({\n          hasClickedInstrumentOptions: !this.state.hasClickedInstrumentOptions,\n        }) \n      }\n    }\n    toggleSequencerBox = () => {\n      if(this.state.hasClickedInstrumentOptions){\n        this.setState({\n          hasClickedSequencerOptions: !this.state.hasClickedSequencerOptions,\n          hasClickedInstrumentOptions: false\n        })\n      } else {\n        this.setState({\n          hasClickedSequencerOptions: !this.state.hasClickedSequencerOptions,\n        }) \n      }\n    }\n    render(){\n      return(\n        <div className=\"Controls\">\n          <div className=\"control-buttons\">\n            <button onClick={this.props.onStartStopLoopClick}> {\n              this.props.isPlaying ? \n                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"whitesmoke\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M11 22h-4v-20h4v20zm6-20h-4v20h4v-20z\"/></svg>\n                  :\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"whitesmoke\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M3 22v-20l18 10-18 10z\"/></svg>                  \n                }\n              </button>\n            <button\n              id=\"optionsButton\"\n              onClick={this.toggleInstrumentBox} \n            > \n              <svg id=\"svg\" width=\"24\" fill=\"whitesmoke\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\"><path d=\"M11 11v-11h1v11h11v1h-11v11h-1v-11h-11v-1h11z\"/></svg> \n            </button>\n            <button\n            onClick={this.toggleSequencerBox}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"whitesmoke\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M24 14v-4h-3.23c-.229-1.003-.624-1.94-1.156-2.785l2.286-2.286-2.83-2.829-2.286 2.286c-.845-.532-1.781-.928-2.784-1.156v-3.23h-4v3.23c-1.003.228-1.94.625-2.785 1.157l-2.286-2.286-2.829 2.828 2.287 2.287c-.533.845-.928 1.781-1.157 2.784h-3.23v4h3.23c.229 1.003.624 1.939 1.156 2.784l-2.286 2.287 2.829 2.829 2.286-2.286c.845.531 1.782.928 2.785 1.156v3.23h4v-3.23c1.003-.228 1.939-.624 2.784-1.156l2.286 2.286 2.828-2.829-2.285-2.286c.532-.845.928-1.782 1.156-2.785h3.231zm-12 2c-2.209 0-4-1.791-4-4s1.791-4 4-4 4 1.791 4 4-1.791 4-4 4z\"/></svg>\n            </button>\n          \n          </div>\n\n          <ControlOptions \n            hasClickedInstrumentOptions={this.state.hasClickedInstrumentOptions}\n            hasClickedSequencerOptions={this.state.hasClickedSequencerOptions}\n            toggleOptions={this.toggleInstrumentBox}\n            onAddInstrumentClick={this.props.onAddInstrumentClick}\n            instrumentOptions={this.props.instrumentOptions}\n            className={this.state.hasClickedInstrumentOptions ? \"instrument-options-container active\" : \"instrument-options-container\"} \n          />\n          <SequencerOptions\n            onChangeBeatDivision={this.props.onChangeBeatDivision}\n            beatDivisionOptions={this.props.beatDivisionOptions}\n            toggleOptions={this.toggleSequencerBox}\n            bpm={this.props.bpm}\n            onChangeTempo={this.props.onChangeTempo}\n            onChangeVolume={this.props.onChangeVolume}\n            className={this.state.hasClickedSequencerOptions ? \"sequencer-options-container active\" : \"sequencer-options-container\"}\n          />\n        </div>\n      )\n    }\n  \n  }\n\n  export default Controls","import React, {Component} from 'react';\nimport './Switches.css'\n\nclass InstrumentNameSwitch extends Component {\n    render(){\n        return(\n            <div className=\"switch instrumentNameSwitch\">{this.props.instrumentName}</div>\n        )\n    }\n}\nclass SwitchGap extends Component {\n    render(){\n        return(\n            <div onClick={()=>console.log(\"remove\")}className=\"switch\">\n            </div>\n        )\n    }  \n}\n\n\nclass InstrumentOptionsSwitch extends Component {\n    \n    render(){\n        return(\n            <div onClick={this.props.onClickInstrumentOptions}className=\"switch instrumentsOptionsSwitch\">\n                <div>&#9776;</div>       \n            </div>\n        )\n    }\n}\nclass RemoveInstrumentSwitch extends Component {\n    \n    removeInstrument = () => {\n        this.props.onRemoveInstrumentClick(this.props.selectorIndex)\n    }\n    render(){\n        return(\n            <div onClick={this.removeInstrument}className=\"switch removeInstrumentSwitch\">\n                &#10005;\n            </div>\n        )\n    }\n}\n\nexport {InstrumentOptionsSwitch, RemoveInstrumentSwitch, SwitchGap, InstrumentNameSwitch}\n","import React from 'react';\nimport './Visualizer.css';\nimport './Selector.css'\nimport {SwitchGap} from './switches/Switches'\n\nclass Visualizer extends React.Component {\n    render(){\n\n      const {counter, beats} = this.props\n      return(\n        <div className=\"Visualizer\">\n          <SwitchGap />\n          {beats.map(\n            (beat, i) => \n              <div className={counter === beat ? \"light active\" : \"light\"} key={i} />\n          )}\n          <SwitchGap />\n          <SwitchGap />\n        </div>\n\n       \n      )\n    }\n  }\n  \n  export default Visualizer","import React from 'react';\nimport './Clicker.css';\n\nclass Clicker extends React.Component {\n\n  onClickerClick = () =>{\n    let beatClicked = this.props.beat\n    this.props.sendBeatsClicked(this.props.selectorIndex, beatClicked)\n  }\n\n  render(){\n    return(\n      <div \n        className={`clicker ${this.props.hasClicked ? \"active\" : \"\"}`} \n        onClick={this.onClickerClick}> </div>\n    )\n  }\n}\n\nexport default Clicker","import { withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst OptionsSlider = withStyles({\n    root: {\n      color: 'whitesmoke',\n      height: 2,\n      padding: '15px 0',\n    },\n    thumb: {\n      height: 14,\n      width: 14,\n      backgroundColor: '#fff',\n\n      '&:hover': {\n          boxShadow: 'none'\n      }\n\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% - 4px)',\n      top: -22,\n      '& *': {\n        background: 'transparent',\n        color: 'whitesmoke',\n      },\n    },\n    track: {\n      height: 2,\n    },\n    rail: {\n      height: 2,\n      opacity: 0.5,\n      backgroundColor: 'purple',\n    },\n    mark: {\n      backgroundColor: '#bfbfbf',\n      height: 8,\n      width: 1,\n      marginTop: -3,\n    },\n    markActive: {\n      opacity: 1,\n      backgroundColor: 'currentColor',\n    },\n  })(Slider);\n\nexport default OptionsSlider","\nimport React from 'react';\nimport './Selector.css'\nimport styled from 'styled-components'\nimport OptionsSlider from './OptionsSlider'\n\n\nclass NoteSelector extends React.Component {\n  \n  sendNote = e => {\n    let note = e.target.id\n\n    this.props.updateInstrumentSettings(\"note\", note, this.props.selectorIndex)\n  }\n\n  render(){\n    return(\n      <div className={this.props.className}>\n        <span className=\"text\"> note:</span>\n      {this.props.notes.map((note, i)=>\n        note === this.props.noteSelected ? \n        <div key={i} id={note} className=\"note active\"> {note} </div> :\n        <div key={i} id={note} onClick={this.sendNote} className=\"note\"> {note} </div>\n        )\n      }\n      </div>\n    )\n  }\n}\n\nclass EffectsSelector extends React.Component {\n\n  sendDelay = (event, value) => { \n    let selectorIndex = this.props.selectorIndex\n    this.props.updateInstrumentSettings(\"delay\", value, selectorIndex)\n  }\n  sendReverb = (event, value) => { \n    let selectorIndex = this.props.selectorIndex\n    this.props.updateInstrumentSettings(\"reverb\", value, selectorIndex)\n  }\n\n\n\n  render(){\n    return(\n      <div className={this.props.className}>\n          <span className=\"text\">delay:</span> \n          <OptionsSlider\n            name=\"delay\"\n            defaultValue={0}\n            getAriaValueText={this.valuetext}\n            aria-labelledby=\"discrete-slider\"\n            min={0}\n            max={100}\n            onChange={this.sendDelay}\n          />\n          <span className=\"text\">reverb:</span>\n          <OptionsSlider \n            name=\"delay\"\n            defaultValue={0}\n            getAriaValueText={this.valuetext}\n            aria-labelledby=\"discrete-slider\"\n            min={0}\n            max={100}\n            onChange={this.sendReverb}\n          />\n      </div>\n\n\n    )\n  }\n}\n\n\n\nexport default class SelectorOptions extends React.Component {\n\n  \n  hangleChange = (e) => {\n    this.setState({value: e.target.value})\n  }\n\n  updateNote = (event, value) => {\n    console.log(value)\n  }\n\n  render(){\n    return(\n      <div className={this.props.className}>\n        {this.props.instrumentType === \"melodic\" ? \n          <NoteSelector \n            noteSelected={this.props.noteSelected}\n            selectorIndex={this.props.selectorIndex}\n            notes={this.props.notes}\n            className=\"note-selector-container\"\n            updateInstrumentSettings={this.props.updateInstrumentSettings}\n          /> \n          :\n          null\n        }\n        <EffectsSelector \n          className=\"effects-options-container\"\n          selectorIndex={this.props.selectorIndex}\n          updateInstrumentSettings={this.props.updateInstrumentSettings}\n        />\n      </div>\n    )\n  }\n}\n","\nimport React from 'react';\nimport Clicker from './clicker/Clicker'\nimport './Selector.css'\nimport {RemoveInstrumentSwitch, InstrumentOptionsSwitch, InstrumentNameSwitch} from './switches/Switches'\nimport SelectorOptions from './SelectorOptions'\n\n\n\n\n\n\n\nclass Selector extends React.Component {\n  constructor(props){\n    super(props)\n\n\n\n    this.state = {\n      hasClickedSelectorOptions: false\n    }\n  }\n\n  toggleOptions = () => {\n    this.setState({\n      hasClickedSelectorOptions: !this.state.hasClickedSelectorOptions\n    })\n  }\n  render(){\n    return(\n      <React.Fragment>\n        <div className=\"Selector\">\n          <InstrumentNameSwitch instrumentName={this.props.instrumentName} />\n          {this.props.beats.map(\n          (beat, i) => \n            <Clicker \n              beat={beat} \n              selectorIndex={this.props.selectorIndex} \n              key={i}\n              sendBeatsClicked={this.props.sendBeatsClicked}\n              hasClicked={this.props.beatsClicked.includes(beat) === true ? true : false}\n              />\n          )}\n          <InstrumentOptionsSwitch onClickInstrumentOptions={this.toggleOptions} />\n          <RemoveInstrumentSwitch \n            selectorIndex={this.props.selectorIndex}\n            onRemoveInstrumentClick={this.props.onRemoveInstrumentClick}\n          />\n        </div>\n        <SelectorOptions \n          selectorIndex={this.props.selectorIndex}\n          updateInstrumentSettings={this.props.updateInstrumentSettings}\n          notes={this.props.notes}\n          noteSelected={this.props.noteSelected}\n          instrumentType={this.props.instrumentType}\n          className={\n            this.state.hasClickedSelectorOptions \n            ? \n            \"selector-options-container active\"\n            :\n            \"selector-options-container\"\n          } \n      />\n      </React.Fragment>\n      )\n    }\n  }\n\nexport default Selector\n","\nimport React from 'react'\nimport Controls from './controls/Controls'\nimport Visualizer from './selector/Visualizer'\nimport Selector from './selector/Selector'\nimport './App.css';\nimport Tone from 'tone'\n\n\n\nclass Container extends React.Component {\n  render(){\n    return (\n      <div className=\"container\">\n        {this.props.children}\n      </div>\n    )\n  }\n} \n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props)\n    let beatDivisionOptions = \n    [{value:2,label:2}, {value:3,label:3}, {value:4,label:4}, {value:5,label:5}, {value:6,label:6}, {value:7,label:7}, {value:8,label:8}, {value:9,label:9}, {value:10, label:10}, {value:11, label:11}, {value:12, label:12}, {value:13, label:13}, {value:14 ,label:14}, {value:15, label:15}, {value:16, label:16}]\n    let beatDivision = 16\n    let loopBeat = new Tone.Loop(this.song, '16n')\n\n    let transport = Tone.Transport\n    let bpm = 140\n    transport.timeSignature = beatDivision/16\n    transport.bpm.value = bpm\n    let counter = 0\n    let beats = []\n    let instrumentOptions = [\"kick\", \"snare\", \"hihat\", \"cymbal\", \"synth\"]\n    let allInstrumentData = []\n    for(let i=0; i<beatDivision; i++){\n      beats.push(i)\n    }\n    let volumeValue = 0\n    let volume = new Tone.Volume(volumeValue).toMaster()\n\n    let notes = ['C', 'C#', 'D', 'D#', \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\n\n    this.state = {\n      notes,\n      volume, \n      volumeValue,\n      beats,\n      instrumentOptions,\n      allInstrumentData, \n      loopBeat,\n      transport,\n      beatDivision, \n      beatDivisionOptions,\n      bpm, \n      counter,\n      isPlaying:false\n    }  \n  }\n\n  startStopLoop = () => {\n    if(this.state.isPlaying === false){\n        this.state.transport.start()\n        this.state.loopBeat.start(0)\n      } else if (this.state.isPlaying === true) {\n          this.state.loopBeat.stop()\n      }\n    this.setState({isPlaying:!this.state.isPlaying})\n  }\n  \n\n//this sets up the loop, including the counter, using beat division from STATE\n  song = (time) => {\n    let {counter, beatDivision} = this.state\n    this.setState({\n      counter: (counter+1)%beatDivision\n    })\n    this.playInstruments(time)\n  }\n\n//this creates an instrument and defines the three parts of each element in the InstrumentData array-- this is unfinished\n//each element has the Instrument Object - [0], the beats clicked [1], and the name of the instrument [2], defined by user\n  onAddInstrumentClick = (instrument) => {\n    class InstrumentObject {\n      constructor(instrument, beatsClicked, instrumentType, instrumentName, instrumentSettings){\n        this.beatsClicked = beatsClicked\n        this.instrument = instrument\n        this.instrumentType = instrumentType\n        this.instrumentName = instrumentName\n        this.instrumentSettings = instrumentSettings\n      }\n    }\n      \n\n    let newInstrument\n    let instrumentType\n    let instrumentSettings = {}\n    let instrumentName = instrument\n    let reverb = new Tone.Freeverb().chain(this.state.volume, Tone.Master)\n    let delay = new Tone.PingPongDelay().connect(reverb)\n    reverb.wet.value  = 0\n    delay.wet.value = 0\n\n\n    if(instrument === \"kick\"){\n      newInstrument = new Tone.MembraneSynth()\n      instrumentType = \"melodic\"\n      instrumentSettings = {\n        note: {\n          noteSelected: this.state.notes[0],\n          octave: 2\n        },\n      }\n        \n    } else if(instrument === \"synth\"){\n        newInstrument = new Tone.Synth()\n        instrumentType = \"melodic\"\n        instrumentSettings = {\n          note: {\n            noteSelected: this.state.notes[0],\n            octave: 3\n          }\n        }\n    } else if(instrument === \"snare\"){\n      newInstrument = new Tone.NoiseSynth()\n      instrumentType = \"perc\"\n      instrumentSettings = {\n      }\n\n    } else if(instrument === \"hihat\"){\n      newInstrument = new Tone.MetalSynth({decay : 0.3})\n      instrumentType = \"perc\"\n      instrumentSettings = {\n      }\n    }else if(instrument === \"cymbal\"){\n      newInstrument = new Tone.MetalSynth()\n      instrumentType = \"perc\"\n      instrumentSettings = {\n      }\n    } else {\n      let error = \"instrument undefined\"\n      throw error\n    }\n\n    instrumentSettings.effects = {\n      reverb: reverb,\n      delay: delay\n    }\n    newInstrument.connect(delay)\n\n    let newInstrumentObject = new InstrumentObject(newInstrument, [], instrumentType, instrumentName, instrumentSettings)\n    this.setState({\n      allInstrumentData: [...this.state.allInstrumentData, newInstrumentObject],  \n    })\n  }\n\n  //remove the instruments \n  removeInstrument = (selectorIndex) => {\n\n\n    const allInstrumentData = this.state.allInstrumentData\n    allInstrumentData[selectorIndex].instrument.disconnect()\n    allInstrumentData.splice(selectorIndex, 1)\n\n    this.setState({\n      allInstrumentData\n    })\n  }  \n\n  //this plays the instrument and is called every beat\n  playInstruments = (time) => {\n    let {allInstrumentData, counter} = this.state\n    \n    allInstrumentData.forEach(instrumentObject => {\n      let {instrument, instrumentType, beatsClicked, instrumentSettings} = instrumentObject\n      beatsClicked.forEach((beat)=>{\n        if(counter===beat){\n          if(instrumentType === \"perc\"){\n            instrument.triggerAttackRelease(\"8n\", time, 1)\n          } else if (instrumentType === \"melodic\"){\n            instrument.triggerAttackRelease(instrumentSettings.note.noteSelected+instrumentSettings.note.octave, \"8n\", time, 1)\n          } else {\n            let error = \"the instrument type is undefined\"\n            throw error\n          }\n        }\n      })\n    })\n  }\n    //this function is called whenever a selector is clicked\n    //it finds out which selector is clicked and links that to an instrumentObject\n    //we then set the state of allInstrumentData[selectorIndex].beatsClicked to an array of numbers\n\n  setBeatsClicked = (selectorIndex, beatClicked) => {\n    const allInstrumentData = this.state.allInstrumentData.map((instrumentObject, instrumentIndex) => {\n      if (instrumentIndex !== selectorIndex) return instrumentObject\n\n      const {beatsClicked, instrument, instrumentType, instrumentName, instrumentSettings} = instrumentObject\n      if(beatsClicked.includes(beatClicked)===true){\n        return {\n          instrument,\n          beatsClicked: beatsClicked.filter(number => number !== beatClicked),\n          instrumentType,\n          instrumentName,\n          instrumentSettings\n        }\n      } else {\n        return {\n          instrument,\n          beatsClicked: [...beatsClicked, beatClicked],\n          instrumentType,\n          instrumentName,\n          instrumentSettings\n        }\n      }\n    })\n    this.setState({\n      allInstrumentData\n    })\n  }\n\n  changeBeatDivision = selectedOption => {\n\n    const allInstrumentData = this.state.allInstrumentData.map((instrumentObject)=>{\n\n      return {\n        ...instrumentObject, \n        beatsClicked:[]\n      }\n\n    })\n\n    if(this.state.isPlaying === true){this.startStopLoop()}\n\n    let transport = this.state.transport\n    transport.timeSignature = selectedOption/16\n\n    let newBeats = []\n    for(let i=0;i<selectedOption;i++){\n      newBeats.push(i)\n    }\n    this.setState({\n      beatDivision: selectedOption,\n      beats: newBeats,\n      allInstrumentData,\n      transport,\n      counter: 0\n    })\n  }\n\n  changeTempo = bpm => {\n    let transport = this.state.transport\n    transport.bpm.value = bpm\n    this.setState({\n      transport: transport\n    })\n  }\n\n  changeVolume = value => {\n    \n    \n    let volume = this.state.volume\n    console.log(volume)\n    volume.volume.value = value\n    this.setState({volume})\n  }\n\n  \n  updateInstrumentSettings = (setting, update, selectorIndex) => {\n    const allInstrumentData = this.state.allInstrumentData.map((instrumentObject, instrumentIndex)=>{\n\n      if(instrumentIndex !== selectorIndex) return instrumentObject\n\n      const {beatsClicked, instrument, instrumentType, instrumentName, instrumentSettings} = instrumentObject\n        if(setting === \"note\"){\n          instrumentSettings.note.noteSelected = update\n          return {\n            instrument,\n            beatsClicked,\n            instrumentType,\n            instrumentName,\n            instrumentSettings\n          }\n        } if (setting === \"reverb\"){\n          let newWet = update/100\n          instrumentSettings.effects.reverb.wet.value = newWet\n          return {\n            instrument,\n            beatsClicked,\n            instrumentType,\n            instrumentName,\n            instrumentSettings\n          }\n          \n        } if (setting === \"delay\"){\n          let newWet = update/100\n          instrumentSettings.effects.delay.wet.value = newWet\n          return {\n            instrument,\n            beatsClicked,\n            instrumentType,\n            instrumentName,\n            instrumentSettings\n          }\n        }    \n    })\n\n    this.setState({\n      allInstrumentData\n    })\n  }\n\n\n  render() {\n    const {allInstrumentData, beats, counter, instrumentOptions, isPlaying} = this.state\n\n    return (\n      <Container>\n        <Controls \n          instrumentOptions={instrumentOptions}\n          onStartLoopClick={this.startLoop} \n          onStartStopLoopClick = {this.startStopLoop} isPlaying={isPlaying}\n          onRevealDataClick={this.revealData} onStopLoopClick={this.stopLoop} \n          onAddInstrumentClick={this.onAddInstrumentClick}\n          beatDivisionOptions={this.state.beatDivisionOptions}\n          onChangeBeatDivision={this.changeBeatDivision}\n          onChangeTempo={this.changeTempo}\n          onChangeVolume={this.changeVolume}\n          bpm={this.state.bpm}\n\n\n          />\n        <Visualizer \n          counter={counter} \n          beats={beats}\n        />\n        {allInstrumentData.map((instrument, i)=> {\n          return(\n            <React.Fragment key={i}>\n              <Selector\n                selectorIndex={i} \n                sendBeatsClicked={this.setBeatsClicked} \n                updateInstrumentSettings={this.updateInstrumentSettings}\n                beats={beats}\n                onRemoveInstrumentClick={this.removeInstrument}\n                instrumentName={allInstrumentData[i].instrumentName}\n                beatsClicked={allInstrumentData[i].beatsClicked}\n                instrumentType={allInstrumentData[i].instrumentType}\n                notes={this.state.notes}\n                noteSelected={allInstrumentData[i].instrumentType === \"melodic\"\n                  ?\n                  allInstrumentData[i].instrumentSettings.note.noteSelected \n                  :\n                  null}\n                />\n            </React.Fragment>\n            )\n          })}\n      </Container>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'what-input'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}