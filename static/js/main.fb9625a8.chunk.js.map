{"version":3,"sources":["components/controls/OptionsSlider.js","components/controls/SequencerOptions.js","components/controls/Controls.js","components/selector/switches/Switches.js","components/selector/Visualizer.js","components/selector/clicker/Clicker.js","components/selector/OptionsSlider.js","components/selector/SelectorOptions.js","utils/convert-volume-range.js","components/selector/Selector.js","lib/instrument-object.js","App.js","serviceWorker.js","index.js"],"names":["OptionsSlider","withStyles","root","color","height","padding","thumb","width","backgroundColor","boxShadow","active","valueLabel","left","top","background","track","rail","opacity","mark","marginTop","markActive","Slider","SequencerOptions","props","handleChange","selectedOption","setState","onChangeBeatDivision","value","toggleOptions","handleTempoChange","e","target","valuetext","updateBeatDivision","event","newBeatDivision","updateTempo","newTempo","onChangeTempo","updateVolume","newVolume","console","log","onChangeVolume","state","className","this","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","min","max","onChange","React","Component","InstrumentOption","handleFileUpload","upload","fileRef","current","files","type","src","URL","createObjectURL","uploadAudioSample","name","createRef","instrument","instrumentName","ref","onClick","onAddInstrumentClick","ControlOptions","instrumentOptions","map","option","i","key","Controls","toggleInstrumentBox","hasClickedSequencerOptions","hasClickedInstrumentOptions","toggleSequencerBox","window","addEventListener","id","hasClickedOptions","toggle","onStartStopLoopClick","isPlaying","xmlns","fill","viewBox","d","fillRule","clipRule","beatDivisionOptions","bpm","InstrumentNameSwitch","SwitchGap","InstrumentOptionsSwitch","onClickInstrumentOptions","hasClickedSelectorOptions","RemoveInstrumentSwitch","removeInstrument","onRemoveInstrumentClick","selectorIndex","Visualizer","counter","beats","beat","Clicker","onClickerClick","beatClicked","sendBeatsClicked","hasClicked","NoteSelector","sendNote","note","updateInstrumentSettings","notes","noteSelected","EffectsSelector","sendDelay","sendReverb","sendVolume","volumeValue","db","SelectorOptions","hangleChange","updateNote","instrumentType","Selector","Fragment","beatsClicked","includes","InstrumentObject","instrumentSettings","audioNodeToChain","volumeNode","Volume","connect","Container","children","App","startStopLoop","transport","start","loopBeat","stop","song","time","beatDivision","playInstruments","audioSrc","fallbackName","newInstrument","reverb","Freeverb","volume","delay","PingPongDelay","wet","newName","prompt","length","prevState","buffer","Buffer","Sampler","urls","C4","sampleMap","octave","MembraneSynth","Synth","C2","baseUrl","effects","newInstrumentObject","allInstrumentData","instrumentObject","Object","keys","forEach","effectName","dispose","splice","triggerAttackRelease","setBeatsClicked","instrumentIndex","filter","number","changeBeatDivision","timeSignature","newBeats","push","changeTempo","changeVolume","setting","update","newWet","Loop","Transport","toDestination","label","onStartLoopClick","startLoop","onRevealDataClick","revealData","onStopLoopClick","stopLoop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb9625a8.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst OptionsSlider = withStyles({\n    root: {\n      color: 'whitesmoke',\n      height: 2,\n      padding: '15px 0',\n    },\n    thumb: {\n      height: 14,\n      width: 14,\n      backgroundColor: '#fff',\n\n    //   marginTop: -14,\n    //   marginLeft: -14,\n      '&:hover': {\n          boxShadow: 'none'\n      }\n\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% - 4px)',\n      top: -22,\n      '& *': {\n        background: 'transparent',\n        color: 'whitesmoke',\n      },\n    },\n    track: {\n      height: 2,\n    },\n    rail: {\n      height: 2,\n      opacity: 0.5,\n      backgroundColor: 'purple',\n    },\n    mark: {\n      backgroundColor: '#bfbfbf',\n      height: 8,\n      width: 1,\n      marginTop: -3,\n    },\n    markActive: {\n      opacity: 1,\n      backgroundColor: 'currentColor',\n    },\n  })(Slider);\n\nexport default OptionsSlider","import React from 'react';\nimport './Controls.css';\nimport OptionsSlider from './OptionsSlider'\n\n\n\n\nclass SequencerOptions extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            selectedOption: null\n        }\n    }\n    \n    handleChange = selectedOption => {\n        this.setState({selectedOption})\n        this.props.onChangeBeatDivision(selectedOption.value)\n        this.props.toggleOptions()\n    }\n  \n    handleTempoChange = e => {\n       let value = e.target.value\n       this.props.handleTempoChange(value)\n    }\n\n    valuetext = value => {\n        return `${value}°C`;\n    }\n\n    updateBeatDivision = (event, value) => {\n        let newBeatDivision = value\n        this.props.onChangeBeatDivision(newBeatDivision)\n    }\n\n    updateTempo = (event, value) => {\n        let newTempo = value\n        this.props.onChangeTempo(newTempo)\n    }\n\n    updateVolume = (event, value) => {\n        let newVolume\n        if(value < 10){\n            newVolume = -100\n        } else {\n            newVolume = value/3 - 30\n        }\n        console.log(newVolume)\n\n        this.props.onChangeVolume(newVolume)\n    }\n\n    render() {\n        return(\n        <div className={this.props.className}>\n            <div className=\"sequencer-options\">\n                <div className=\"options\">\n                    <span className=\"text\"> beats\n                    </span>\n                    <OptionsSlider\n                        defaultValue={16}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        min={2}\n                        max={16}\n                        onChange={this.updateBeatDivision}\n                    />\n                </div>\n                <div className=\"options\">\n                    <span className=\"text\"> tempo/bpm\n                    </span>\n                    <OptionsSlider\n                        defaultValue={120}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        min={40}\n                        max={260}\n                        onChange={this.updateTempo}\n                    />\n                </div>\n                <div className=\"options\">\n                    <span className=\"text\"> volume\n                    </span>\n                    <OptionsSlider\n                        defaultValue={90}\n                        getAriaValueText={this.valuetext}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        min={0}\n                        max={100}\n                        onChange={this.updateVolume}\n                    />\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default SequencerOptions\n","import React from 'react';\nimport SequencerOptions from './SequencerOptions';\nimport './Controls.css';\n\nclass InstrumentOption extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fileRef = React.createRef();\n        this.state = {\n            instrument: this.props.instrumentName,\n        };\n    }\n\n    handleFileUpload = () => {\n        const upload = this.fileRef.current.files[0];\n        if (\n            upload.type === 'audio/mpeg' ||\n            upload.type === 'audio/x-wav' ||\n            'audio/mp3' ||\n            'audio/wav' ||\n            'audio/wave' ||\n            'audio/vnd.wave' ||\n            'audio.aac'\n        ) {\n            const src = URL.createObjectURL(upload);\n            this.props.uploadAudioSample(src, upload.name);\n        } else {\n            prompt(`Sorry, this doesn't look like an audio file.`);\n        }\n    };\n\n    render() {\n        return (\n            <>\n                {this.props.instrumentName === 'upload' ? (\n                    <button className=\"upload-input-button\">\n                        {this.props.instrumentName}\n                        <input\n                            className=\"upload-input\"\n                            ref={this.fileRef}\n                            type=\"file\"\n                            onChange={() => this.handleFileUpload()}\n                        />\n                        <div className=\"hover-button\"></div>\n                    </button>\n                ) : (\n                    <button\n                        className=\"options\"\n                        onClick={() =>\n                            this.props.onAddInstrumentClick(\n                                this.props.instrumentName\n                            )\n                        }\n                    >\n                        {this.props.instrumentName}\n                    </button>\n                )}\n            </>\n        );\n    }\n}\nclass ControlOptions extends React.Component {\n    render() {\n        return (\n            <div className={this.props.className}>\n                {this.props.instrumentOptions.map((option, i) => (\n                    <InstrumentOption\n                        key={i}\n                        instrumentName={option}\n                        onAddInstrumentClick={this.props.onAddInstrumentClick}\n                        uploadAudioSample={this.props.uploadAudioSample}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nclass Controls extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            instrumentOptions: ['option1', 'option2', 'option3', 'option4'],\n            hasClickedInstrumentOptions: false,\n            hasClickedSequencerOptions: false,\n        };\n    }\n    componentDidMount() {\n        window.addEventListener('click', (e) => {\n            let id = e.target.id;\n            if (\n                id !== 'svg' &&\n                id !== 'optionsButton' &&\n                this.state.hasClickedOptions === true\n            ) {\n                this.toggle();\n            }\n        });\n    }\n    toggleInstrumentBox = () => {\n        if (this.state.hasClickedSequencerOptions) {\n            this.setState({\n                hasClickedInstrumentOptions: !this.state\n                    .hasClickedInstrumentOptions,\n                hasClickedSequencerOptions: false,\n            });\n        } else {\n            this.setState({\n                hasClickedInstrumentOptions: !this.state\n                    .hasClickedInstrumentOptions,\n            });\n        }\n    };\n    toggleSequencerBox = () => {\n        if (this.state.hasClickedInstrumentOptions) {\n            this.setState({\n                hasClickedSequencerOptions: !this.state\n                    .hasClickedSequencerOptions,\n                hasClickedInstrumentOptions: false,\n            });\n        } else {\n            this.setState({\n                hasClickedSequencerOptions: !this.state\n                    .hasClickedSequencerOptions,\n            });\n        }\n    };\n    render() {\n        return (\n            <div className=\"Controls\">\n                <div className=\"control-buttons\">\n                    <button onClick={this.props.onStartStopLoopClick}>\n                        {' '}\n                        {this.props.isPlaying ? (\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fill=\"whitesmoke\"\n                                width=\"24\"\n                                height=\"24\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M11 22h-4v-20h4v20zm6-20h-4v20h4v-20z\" />\n                            </svg>\n                        ) : (\n                            <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fill=\"whitesmoke\"\n                                width=\"24\"\n                                height=\"24\"\n                                viewBox=\"0 0 24 24\"\n                            >\n                                <path d=\"M3 22v-20l18 10-18 10z\" />\n                            </svg>\n                        )}\n                    </button>\n                    <button\n                        id=\"optionsButton\"\n                        onClick={this.toggleInstrumentBox}\n                    >\n                        {this.state.hasClickedInstrumentOptions ? (\n                            <div>&#x2014;</div>\n                        ) : (\n                            <svg\n                                id=\"svg\"\n                                width=\"24\"\n                                fill=\"whitesmoke\"\n                                height=\"24\"\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fillRule=\"evenodd\"\n                                clipRule=\"evenodd\"\n                            >\n                                <path d=\"M11 11v-11h1v11h11v1h-11v11h-1v-11h-11v-1h11z\" />\n                            </svg>\n                        )}\n                    </button>\n                    <button onClick={this.toggleSequencerBox}>\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"whitesmoke\"\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                        >\n                            <path d=\"M24 14v-4h-3.23c-.229-1.003-.624-1.94-1.156-2.785l2.286-2.286-2.83-2.829-2.286 2.286c-.845-.532-1.781-.928-2.784-1.156v-3.23h-4v3.23c-1.003.228-1.94.625-2.785 1.157l-2.286-2.286-2.829 2.828 2.287 2.287c-.533.845-.928 1.781-1.157 2.784h-3.23v4h3.23c.229 1.003.624 1.939 1.156 2.784l-2.286 2.287 2.829 2.829 2.286-2.286c.845.531 1.782.928 2.785 1.156v3.23h4v-3.23c1.003-.228 1.939-.624 2.784-1.156l2.286 2.286 2.828-2.829-2.285-2.286c.532-.845.928-1.782 1.156-2.785h3.231zm-12 2c-2.209 0-4-1.791-4-4s1.791-4 4-4 4 1.791 4 4-1.791 4-4 4z\" />\n                        </svg>\n                    </button>\n                </div>\n\n                <ControlOptions\n                    hasClickedInstrumentOptions={\n                        this.state.hasClickedInstrumentOptions\n                    }\n                    hasClickedSequencerOptions={\n                        this.state.hasClickedSequencerOptions\n                    }\n                    onAddInstrumentClick={this.props.onAddInstrumentClick}\n                    instrumentOptions={this.props.instrumentOptions}\n                    uploadAudioSample={this.props.uploadAudioSample}\n                    className={\n                        this.state.hasClickedInstrumentOptions\n                            ? 'instrument-options-container active'\n                            : 'instrument-options-container'\n                    }\n                />\n                <SequencerOptions\n                    onChangeBeatDivision={this.props.onChangeBeatDivision}\n                    beatDivisionOptions={this.props.beatDivisionOptions}\n                    toggleOptions={this.toggleSequencerBox}\n                    bpm={this.props.bpm}\n                    onChangeTempo={this.props.onChangeTempo}\n                    onChangeVolume={this.props.onChangeVolume}\n                    className={\n                        this.state.hasClickedSequencerOptions\n                            ? 'sequencer-options-container active'\n                            : 'sequencer-options-container'\n                    }\n                />\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, {Component} from 'react';\nimport './Switches.css'\n\nclass InstrumentNameSwitch extends Component {\n    render(){\n        return(\n            <div className=\"switch instrumentNameSwitch\">{this.props.instrumentName}</div>\n        )\n    }\n}\nclass SwitchGap extends Component {\n    render(){\n        return(\n            <div onClick={()=>console.log(\"remove\")}className=\"switch\">\n            </div>\n        )\n    }  \n}\n\n\nclass InstrumentOptionsSwitch extends Component {\n    \n    render(){\n        return(\n            <div \n                onClick={this.props.onClickInstrumentOptions}\n                className={this.props.hasClickedSelectorOptions ?\n                    \"switch instrumentsOptionsSwitch active\"\n                    :\n                    \"switch instrumentsOptionsSwitch\"\n                }>\n                <div>&#9776;</div>       \n            </div>\n        )\n    }\n}\nclass RemoveInstrumentSwitch extends Component {\n    \n    removeInstrument = () => {\n        this.props.onRemoveInstrumentClick(this.props.selectorIndex)\n    }\n    render(){\n        return(\n            <div onClick={this.removeInstrument}className=\"switch removeInstrumentSwitch\">\n                &#10005;\n            </div>\n        )\n    }\n}\n\nexport {InstrumentOptionsSwitch, RemoveInstrumentSwitch, SwitchGap, InstrumentNameSwitch}\n","import React from 'react';\nimport './Visualizer.css';\nimport './Selector.css'\nimport {SwitchGap} from './switches/Switches'\n\nclass Visualizer extends React.Component {\n    render(){\n\n      const {counter, beats} = this.props\n      return(\n        <div className=\"Visualizer\">\n          <SwitchGap />\n          {beats.map(\n            (beat, i) => \n              <div className={counter === beat ? \"light active\" : \"light\"} key={i} />\n          )}\n          <SwitchGap />\n          <SwitchGap />\n        </div>\n\n       \n      )\n    }\n  }\n  \n  export default Visualizer","import React from 'react';\nimport './Clicker.css';\n\nclass Clicker extends React.Component {\n\n  onClickerClick = () =>{\n    let beatClicked = this.props.beat\n    this.props.sendBeatsClicked(this.props.selectorIndex, beatClicked)\n  }\n\n  render(){\n    return(\n      <div \n        className={`clicker ${this.props.hasClicked ? \"active\" : \"\"}`} \n        onClick={this.onClickerClick}> </div>\n    )\n  }\n}\n\nexport default Clicker","import { withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\n\nconst OptionsSlider = withStyles({\n    root: {\n      color: 'whitesmoke',\n      height: 2,\n      padding: '15px 0',\n    },\n    thumb: {\n      height: 14,\n      width: 14,\n      backgroundColor: '#fff',\n\n      '&:hover': {\n          boxShadow: 'none'\n      }\n\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% - 4px)',\n      top: -22,\n      '& *': {\n        background: 'transparent',\n        color: 'whitesmoke',\n      },\n    },\n    track: {\n      height: 2,\n    },\n    rail: {\n      height: 2,\n      opacity: 0.5,\n      backgroundColor: 'purple',\n    },\n    mark: {\n      backgroundColor: '#bfbfbf',\n      height: 8,\n      width: 1,\n      marginTop: -3,\n    },\n    markActive: {\n      opacity: 1,\n      backgroundColor: 'currentColor',\n    },\n  })(Slider);\n\nexport default OptionsSlider","\nimport React from 'react';\nimport './Selector.css'\nimport OptionsSlider from './OptionsSlider'\nimport { dbToRange } from '../../utils/convert-volume-range'\n\n\nclass NoteSelector extends React.Component {\n  \n  sendNote = e => {\n    let note = e.target.id\n    this.props.updateInstrumentSettings(\"note\", note, this.props.selectorIndex)\n  }\n\n  render(){\n    return(\n      <div className={this.props.className}>\n        <span className=\"text\"> note:</span>\n      {this.props.notes.map((note, i)=>\n        note === this.props.noteSelected ? \n        <div key={i} id={note} className=\"note active\"> {note} </div> :\n        <div key={i} id={note} onClick={this.sendNote} className=\"note\"> {note} </div>\n        )\n      }\n      </div>\n    )\n  }\n}\n\nclass EffectsSelector extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      volumeValue: this.props.volumeValue\n    }\n  }\n  sendDelay = (event, value) => { \n    let selectorIndex = this.props.selectorIndex\n    this.props.updateInstrumentSettings(\"delay\", value, selectorIndex)\n  }\n  sendReverb = (event, value) => { \n    let selectorIndex = this.props.selectorIndex\n    this.props.updateInstrumentSettings(\"reverb\", value, selectorIndex)\n  }\n  sendVolume = (event, value) => {\n    let selectorIndex = this.props.selectorIndex\n    this.props.updateInstrumentSettings(\"volume\", value, selectorIndex)\n  }\n\n  render(){\n    return(\n      <div className={this.props.className}>\n          <span className=\"text\">volume:</span> \n          <OptionsSlider\n            name=\"volume\"\n            defaultValue={dbToRange(this.state.volumeValue)}\n            getAriaValueText={this.valuetext}\n            aria-labelledby=\"discrete-slider\"\n            min={0}\n            max={100}\n            onChange={this.sendVolume}\n          />\n          <span className=\"text\">delay:</span> \n          <OptionsSlider\n            name=\"delay\"\n            defaultValue={0}\n            getAriaValueText={this.valuetext}\n            aria-labelledby=\"discrete-slider\"\n            min={0}\n            max={100}\n            onChange={this.sendDelay}\n          />\n          <span className=\"text\">reverb:</span>\n          <OptionsSlider \n            name=\"delay\"\n            defaultValue={0}\n            getAriaValueText={this.valuetext}\n            aria-labelledby=\"discrete-slider\"\n            min={0}\n            max={100}\n            onChange={this.sendReverb}\n          />\n      </div>\n\n\n    )\n  }\n}\n\n\n\nexport default class SelectorOptions extends React.Component {\n\n  \n  hangleChange = (e) => {\n    this.setState({value: e.target.value})\n  }\n\n  updateNote = (event, value) => {\n    console.log(value)\n  }\n\n  render(){\n    return(\n      <div className={this.props.className}>\n        {this.props.instrumentType === \"melodic\" ? \n          <NoteSelector \n            noteSelected={this.props.noteSelected}\n            selectorIndex={this.props.selectorIndex}\n            notes={this.props.notes}\n            className=\"note-selector-container\"\n            updateInstrumentSettings={this.props.updateInstrumentSettings}\n          /> \n          :\n          null\n        }\n        <EffectsSelector \n          volumeValue={this.props.volumeValue}\n          className=\"effects-options-container\"\n          selectorIndex={this.props.selectorIndex}\n          updateInstrumentSettings={this.props.updateInstrumentSettings}\n        />\n      </div>\n    )\n  }\n}\n","\n\n\n\nexport const dbToRange = db => (db+40)*(2.5)\nexport const rangeToDb = rangeVal => rangeVal*(0.4) - 40","\nimport React from 'react';\nimport Clicker from './clicker/Clicker'\nimport './Selector.css'\nimport {RemoveInstrumentSwitch, InstrumentOptionsSwitch, InstrumentNameSwitch} from './switches/Switches'\nimport SelectorOptions from './SelectorOptions'\n\n\n\n\n\n\n\nclass Selector extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      hasClickedSelectorOptions: false\n    }\n  }\n\n  toggleOptions = () => {\n    this.setState({\n      hasClickedSelectorOptions: !this.state.hasClickedSelectorOptions\n    })\n  }\n  render(){\n    return(\n      <React.Fragment>\n        <div className=\"Selector\">\n          <InstrumentNameSwitch instrumentName={this.props.instrumentName} />\n          {this.props.beats.map(\n          (beat, i) => \n            <Clicker \n              beat={beat} \n              selectorIndex={this.props.selectorIndex} \n              key={i}\n              sendBeatsClicked={this.props.sendBeatsClicked}\n              hasClicked={this.props.beatsClicked.includes(beat) === true ? true : false}\n              />\n          )}\n          <InstrumentOptionsSwitch \n            onClickInstrumentOptions={this.toggleOptions}\n            hasClickedSelectorOptions={this.state.hasClickedSelectorOptions}  />\n          <RemoveInstrumentSwitch \n            selectorIndex={this.props.selectorIndex}\n            onRemoveInstrumentClick={this.props.onRemoveInstrumentClick}\n          />\n        </div>\n        <SelectorOptions \n          selectorIndex={this.props.selectorIndex}\n          updateInstrumentSettings={this.props.updateInstrumentSettings}\n          volumeValue={this.props.volumeValue}\n          notes={this.props.notes}\n          noteSelected={this.props.noteSelected}\n          instrumentType={this.props.instrumentType}\n          className={\n            this.state.hasClickedSelectorOptions \n            ? \n            \"selector-options-container active\"\n            :\n            \"selector-options-container\"\n          } \n      />\n      </React.Fragment>\n      )\n    }\n  }\n\nexport default Selector\n","import { Volume } from 'tone'\n\nexport default class InstrumentObject {\n    constructor(instrument, beatsClicked, instrumentType, instrumentName, instrumentSettings, audioNodeToChain){\n      this.beatsClicked = beatsClicked\n      this.instrument = instrument\n      this.instrumentType = instrumentType\n      this.instrumentName = instrumentName\n      this.instrumentSettings = instrumentSettings\n      this.volumeNode = new Volume().connect(audioNodeToChain)\n      this.instrument.connect(this.volumeNode)\n    }\n  }","import React from 'react';\nimport Controls from './components/controls/Controls';\nimport Visualizer from './components/selector/Visualizer';\nimport Selector from './components/selector/Selector';\nimport './App.css';\nimport {\n    Buffer,\n    Loop,\n    Sampler,\n    Transport,\n    Freeverb,\n    PingPongDelay,\n    MembraneSynth,\n    Synth,\n    Volume\n} from 'tone';\nimport InstrumentObject from './lib/instrument-object';\nimport { rangeToDb } from './utils/convert-volume-range';\n\nclass Container extends React.Component {\n    render() {\n        return <div className=\"container\">{this.props.children}</div>;\n    }\n}\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        let beatDivisionOptions = [\n            { value: 2, label: 2 },\n            { value: 3, label: 3 },\n            { value: 4, label: 4 },\n            { value: 5, label: 5 },\n            { value: 6, label: 6 },\n            { value: 7, label: 7 },\n            { value: 8, label: 8 },\n            { value: 9, label: 9 },\n            { value: 10, label: 10 },\n            { value: 11, label: 11 },\n            { value: 12, label: 12 },\n            { value: 13, label: 13 },\n            { value: 14, label: 14 },\n            { value: 15, label: 15 },\n            { value: 16, label: 16 },\n        ];\n        let beatDivision = 16;\n        let loopBeat = new Loop(this.song, '16n');\n\n        const transport = Transport;\n        let bpm = 140;\n        transport.timeSignature = beatDivision / 16;\n        transport.bpm.value = bpm;\n        let counter = 0;\n        let beats = [];\n        let instrumentOptions = [\n            'kick',\n            'snare',\n            'hat',\n            'crash',\n            'synth',\n            'upload',\n        ];\n        let allInstrumentData = [];\n        for (let i = 0; i < beatDivision; i++) {\n            beats.push(i);\n        }\n\n        let notes = [\n            'C',\n            'C#',\n            'D',\n            'D#',\n            'E',\n            'F',\n            'F#',\n            'G',\n            'G#',\n            'A',\n            'A#',\n            'B',\n        ];\n        this.state = {\n            volume: new Volume().toDestination(),\n            sampleMap: {},\n            notes,\n            beats,\n            instrumentOptions,\n            allInstrumentData,\n            loopBeat,\n            transport,\n            beatDivision,\n            beatDivisionOptions,\n            bpm,\n            counter,\n            isPlaying: false,\n        };\n    }\n\n    startStopLoop = () => {\n        if (this.state.isPlaying === false) {\n            this.state.transport.start();\n            this.state.loopBeat.start(0);\n        } else if (this.state.isPlaying === true) {\n            this.state.loopBeat.stop();\n        }\n        this.setState({ isPlaying: !this.state.isPlaying });\n    };\n\n    //this sets up the loop, including the counter, using beat division from STATE\n    song = (time) => {\n        let { counter, beatDivision } = this.state;\n        this.setState({\n            counter: (counter + 1) % beatDivision,\n        });\n        this.playInstruments(time);\n    };\n\n    uploadAudioSample = (audioSrc, fallbackName) =>\n        this.onAddInstrumentClick('upload', audioSrc, fallbackName);\n\n    //this creates an instrument and defines the three parts of each element in the InstrumentData array-- this is unfinished\n    //each element has the Instrument Object - [0], the beats clicked [1], and the name of the instrument [2], defined by user\n    onAddInstrumentClick = (instrument, src = null, fallbackName = null) => {\n        let newInstrument;\n        let instrumentType;\n        let instrumentSettings = {};\n        let instrumentName = instrument;\n        let reverb = new Freeverb().connect(this.state.volume);\n        let delay = new PingPongDelay().connect(reverb);\n        reverb.wet.value = 0;\n        delay.wet.value = 0;\n\n        if (instrument === 'upload' && src) {\n            let newName = prompt(\"What's the name of your new instrument?\");\n            if (this.state.instrumentOptions.includes(newName)) {\n                newName = prompt(\n                    \"Whoops, there's already an instrument with this name. Try something else.\"\n                );\n            }\n            instrumentName = newName.length < 1 ? fallbackName : newName;\n            this.setState((prevState) => ({\n                instrumentOptions: [\n                    instrumentName,\n                    ...prevState.instrumentOptions,\n                ],\n            }));\n            const buffer = new Buffer(src);\n            newInstrument = new Sampler({\n                urls: {\n                    C4: buffer,\n                },\n            });\n            this.setState((prevState) => ({\n                sampleMap: {\n                    ...prevState.sampleMap,\n                    [instrumentName]: newInstrument,\n                },\n            }));\n            instrumentType = 'melodic';\n            instrumentSettings = {\n                note: {\n                    noteSelected: this.state.notes[0],\n                    octave: 4,\n                },\n            };\n        } else if (instrument === 'kick') {\n            newInstrument = new MembraneSynth();\n            instrumentType = 'melodic';\n            instrumentSettings = {\n                note: {\n                    noteSelected: this.state.notes[0],\n                    octave: 2,\n                },\n            };\n        } else if (instrument === 'synth') {\n            newInstrument = new Synth();\n            instrumentType = 'melodic';\n            instrumentSettings = {\n                note: {\n                    noteSelected: this.state.notes[0],\n                    octave: 3,\n                },\n            };\n        } else if (\n            instrument === 'hat' ||\n            instrument === 'crash' ||\n            instrument === 'snare'\n        ) {\n            newInstrument = new Sampler({\n                urls: { C2: `${instrument}.mp3` },\n                baseUrl:\n                    'https://res.cloudinary.com/dcttcffbc/video/upload/v1597045705/samples/react-sequencer/',\n            });\n            instrumentType = 'melodic';\n            instrumentSettings = {\n                note: {\n                    noteSelected: this.state.notes[0],\n                    octave: 2,\n                },\n            };\n        } else {\n            newInstrument = this.state.sampleMap[instrument];\n            instrumentType = 'melodic';\n            instrumentSettings = {\n                note: {\n                    noteSelected: this.state.notes[0],\n                    octave: 4,\n                },\n            };\n        }\n\n        instrumentSettings.effects = {\n            reverb: reverb,\n            delay: delay,\n        };\n\n        const newInstrumentObject = new InstrumentObject(\n            newInstrument,\n            [],\n            instrumentType,\n            instrumentName,\n            instrumentSettings,\n            delay\n        );\n\n        this.setState({\n            allInstrumentData: [\n                ...this.state.allInstrumentData,\n                newInstrumentObject,\n            ],\n        });\n    };\n\n    //remove the instruments\n    removeInstrument = (selectorIndex) => {\n        const allInstrumentData = this.state.allInstrumentData;\n        const instrumentObject = allInstrumentData[selectorIndex];\n        const effects = instrumentObject.instrumentSettings.effects;\n        Object.keys(effects).forEach((effectName) => {\n            effects[effectName].dispose();\n        });\n\n        const name = allInstrumentData[selectorIndex].instrumentName;\n        if (!this.state.sampleMap[name]) {\n            instrumentObject.instrument.dispose();\n        }\n\n        allInstrumentData.splice(selectorIndex, 1);\n\n        this.setState({\n            allInstrumentData,\n        });\n    };\n\n    //this plays the instrument and is called every beat\n    playInstruments = (time) => {\n        let { allInstrumentData, counter } = this.state;\n\n        allInstrumentData.forEach((instrumentObject) => {\n            let {\n                instrument,\n                instrumentType,\n                beatsClicked,\n                instrumentSettings,\n            } = instrumentObject;\n            beatsClicked.forEach((beat) => {\n                if (counter === beat) {\n                    if (instrumentType === 'perc') {\n                        instrument.triggerAttackRelease('4n', time, 1);\n                    } else if (instrumentType === 'melodic') {\n                        instrument.triggerAttackRelease(\n                            instrumentSettings.note.noteSelected +\n                                instrumentSettings.note.octave,\n                            '8n',\n                            time,\n                            1\n                        );\n                    } else {\n                        let error = 'the instrument type is undefined';\n                        throw error;\n                    }\n                }\n            });\n        });\n    };\n    //this function is called whenever a selector is clicked\n    //it finds out which selector is clicked and links that to an instrumentObject\n    //we then set the state of allInstrumentData[selectorIndex].beatsClicked to an array of numbers\n\n    setBeatsClicked = (selectorIndex, beatClicked) => {\n        const allInstrumentData = this.state.allInstrumentData.map(\n            (instrumentObject, instrumentIndex) => {\n                if (instrumentIndex !== selectorIndex) return instrumentObject;\n\n                const {\n                    beatsClicked,\n                    instrument,\n                    instrumentType,\n                    instrumentName,\n                    instrumentSettings,\n                    volumeNode,\n                } = instrumentObject;\n                if (beatsClicked.includes(beatClicked) === true) {\n                    return {\n                        instrument,\n                        beatsClicked: beatsClicked.filter(\n                            (number) => number !== beatClicked\n                        ),\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                } else {\n                    return {\n                        instrument,\n                        beatsClicked: [...beatsClicked, beatClicked],\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                }\n            }\n        );\n        this.setState({\n            allInstrumentData,\n        });\n    };\n\n    changeBeatDivision = (selectedOption) => {\n        const allInstrumentData = this.state.allInstrumentData.map(\n            (instrumentObject) => {\n                return {\n                    ...instrumentObject,\n                    beatsClicked: [],\n                };\n            }\n        );\n\n        if (this.state.isPlaying === true) {\n            this.startStopLoop();\n        }\n\n        let transport = this.state.transport;\n        transport.timeSignature = selectedOption / 16;\n\n        let newBeats = [];\n        for (let i = 0; i < selectedOption; i++) {\n            newBeats.push(i);\n        }\n        this.setState({\n            beatDivision: selectedOption,\n            beats: newBeats,\n            allInstrumentData,\n            transport,\n            counter: 0,\n        });\n    };\n\n    changeTempo = (bpm) => {\n        let transport = this.state.transport;\n        transport.bpm.value = bpm;\n        this.setState({\n            transport: transport,\n        });\n    };\n\n    changeVolume = (value) => {\n        let volume = this.state.volume;\n        volume.volume.value = value;\n        this.setState({ volume });\n    };\n\n    updateInstrumentSettings = (setting, update, selectorIndex) => {\n        const allInstrumentData = this.state.allInstrumentData.map(\n            (instrumentObject, instrumentIndex) => {\n                if (instrumentIndex !== selectorIndex) return instrumentObject;\n\n                const {\n                    beatsClicked,\n                    instrument,\n                    instrumentType,\n                    instrumentName,\n                    instrumentSettings,\n                    volumeNode,\n                } = instrumentObject;\n                if (setting === 'note') {\n                    instrumentSettings.note.noteSelected = update;\n                    return {\n                        instrument,\n                        beatsClicked,\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                }\n                if (setting === 'reverb') {\n                    let newWet = update / 100;\n                    instrumentSettings.effects.reverb.wet.value = newWet;\n                    return {\n                        instrument,\n                        beatsClicked,\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                }\n                if (setting === 'delay') {\n                    let newWet = update / 100;\n                    instrumentSettings.effects.delay.wet.value = newWet;\n                    return {\n                        instrument,\n                        beatsClicked,\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                }\n                if (setting === 'volume') {\n                    let newVolume = rangeToDb(update);\n                    volumeNode.volume.value = newVolume;\n\n                    return {\n                        instrument,\n                        beatsClicked,\n                        instrumentType,\n                        instrumentName,\n                        instrumentSettings,\n                        volumeNode,\n                    };\n                } else return this.state.allInstrumentData;\n            }\n        );\n\n        this.setState({\n            allInstrumentData,\n        });\n    };\n\n    render() {\n        const {\n            beatDivisionOptions,\n            bpm,\n            allInstrumentData,\n            beats,\n            counter,\n            instrumentOptions,\n            isPlaying,\n        } = this.state;\n\n        return (\n            <Container>\n                <Controls\n                    instrumentOptions={instrumentOptions}\n                    onStartLoopClick={this.startLoop}\n                    onStartStopLoopClick={this.startStopLoop}\n                    isPlaying={isPlaying}\n                    onRevealDataClick={this.revealData}\n                    onStopLoopClick={this.stopLoop}\n                    onAddInstrumentClick={this.onAddInstrumentClick}\n                    beatDivisionOptions={beatDivisionOptions}\n                    onChangeBeatDivision={this.changeBeatDivision}\n                    onChangeTempo={this.changeTempo}\n                    onChangeVolume={this.changeVolume}\n                    bpm={bpm}\n                    uploadAudioSample={this.uploadAudioSample}\n                />\n                <Visualizer counter={counter} beats={beats} />\n                {allInstrumentData.map((instrument, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <Selector\n                                selectorIndex={i}\n                                sendBeatsClicked={this.setBeatsClicked}\n                                updateInstrumentSettings={\n                                    this.updateInstrumentSettings\n                                }\n                                beats={beats}\n                                onRemoveInstrumentClick={this.removeInstrument}\n                                instrumentName={instrument.instrumentName}\n                                beatsClicked={instrument.beatsClicked}\n                                volumeValue={instrument.volumeNode.volume.value}\n                                instrumentType={instrument.instrumentType}\n                                notes={this.state.notes}\n                                noteSelected={\n                                    instrument.instrumentType === 'melodic'\n                                        ? instrument.instrumentSettings.note\n                                              .noteSelected\n                                        : null\n                                }\n                            />\n                        </React.Fragment>\n                    );\n                })}\n            </Container>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'what-input'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}